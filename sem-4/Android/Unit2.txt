62.  Introduce the SQLite database and explain its key features (e.g., lightweight, serverless) and
how it supports data persistence.

    1. It is free and opensource
    2. Sqlite is lightweight, serverless relational database engine.
    3. Design to store data locally within the app.


    Key Feature 
        1.  Lightweight
            - SQLite is very small in size, making it ideal for mobile applications.
        2.  Serverless 
            - Unlike other database SQLite not require server to operate the database.
        3.  Zero Configuration
            - No installation, configuration or adminstration is needed.
        4.  ACID properites
            - Support ACID properties.
        5.  Cross platform
            - SQLite is cross-platform and works on multiple operating systems, including Android, iOS, Windows, macOS, Linux, etc.
        6.  Data Persistence
            - SQLite supports persistent data storage,
            meaning data is saved permanently in a file on the device.
############################################################################################################################
51.  Compare ListView and RecyclerView. What advantages does RecyclerView offer over ListView?
   ListView and RecyclerView are both UI components in Android 
   used to display a scrollable list of items.

   1. ListView 
      1. Listview introduced in older Android 1.0
      2. used for basic list
      3. performance is slower for big list
      4. support only veritical list layout 
      5. No default Animation suppport.
      6. Code complexity is easy.
      7. Less Flexible.
      8. Best for small, simple lists

   2. RecyclerView
      1. introduced in newer Android 5.0 lollipop.
      2. Used for complex and modern list
      3. Performance is faster and smoother for big list.
      4. Support vertical, grid, etc layouts.
      5. Build in Animation Support.
      6. More code needed, but cleaner
      7. Highly Flexible.
      8. Best for large, dynamic and complex list

########################################################################################################################
55.  How do you handle large datasets in Android? Discuss the use of pagination with RecyclerView
and Room.
    Pagination - 
        loading small chunks of data at a time instead of the entire dataset.
    1. Recycler View.
        1. Display scrollable list.
        2. Efficient reuses views via ViewHolder patterns.
        3. Ideal for datasets that are too large to load all at once.
        4. Best for large, dynamic and complex list
    2. Room
        1. It is SQLite abstraction layer.
        2. Provides a clean API to interact with the local database.
        3. Integrates well with Paging Library for paginated queries
        4. Reducing Boilerplate
        5. Offering compline time validation for sql queries.

###########################################################################################################################
53.  What is the Room Persistence Library in Android? Explain its components (Entity, DAO, and
Database) and how it simplifies SQLite usage. 

    1. Room
        1. It is SQLite abstraction layer.
        2. Provides a clean API to interact with the local database.
        3. Integrates well with Paging Library for paginated queries
        4. Reducing Boilerplate
        5. Offering compline time validation for sql queries.
    
    Components of Room
        1. Entity
            - Represents a table in database.
            - Each field in class represent column
        2. DAO
           - DAO stand for Data Access Object
           - Interface or abstract class with method access database.
           - Use annotation like @Insert, @Delete, @Query.
        3. Database -
          - THe main access point of the room database.
#################################################################################################################################
56.  What are the best practices for using SQLite in Android? Discuss performance optimization and
error handling.
    1. Use SqliteOpenHelper -
        Manage database creation and upgrades 
    2. Transactions
        Group operations for better performance
    3. Bulk Insert-
        Insert multipal rows at once.
    4. Buld Update -
        Update Multipal rows at once.
    5. Indexes 
        - Create indexes for faster queries.
    6. Optimized querry
        - Fetch necessary data and use limit pagination.
    7. Use ORM 
       - Use orm for faster and easier database management 
    8. Use Parameterized Queries:
       - prevent sql injection using placeholders.

#####################################################################################################################################
59.  What is the purpose of transactions in SQLite? Provide an example of how to use transactions in
an Android app.
    1. In SQLite, transaction are used to group multipal database operations
       include Insert, Update, delete 
    2. Key Benefits
       1. Atomicity 
          - Atomacity ensure that either all change's made by transition are commited to the database,
            or none of them
       2. Consitency 
          - Consistency insure that transaction is carred out from one valid state to another state
       3. Isolation
          - Isolation ensure that execution of one transaction should not affect other transaction
       4. Durablity -
          - Durablity ensure that once a transaction is completed it permanatly stored in 
          database,

###################################################################################################################
63.  Explain the various options for storing data in an Android app (e.g., Internal Storage, External
Storage, SQLite, SharedPreferences).
    1. Internal Storage -
        - Saves files privately within the appâ€™s storage space.
        - Files are deleted when the app is uninstalled.
    2. External Storage 
        - Save files on external storage eg SD-Card 
        - Require Read/Write permission
    3. SQLite Database 
        - Lightweight, local relational database.
        - Good for storing structured data.
    4. SharedPreferences
        - store data in key-value pair 
        - Ideal for storeing user prefrences, settings etc.
###################################################################################################################
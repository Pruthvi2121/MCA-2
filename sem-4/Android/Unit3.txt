Advantage and disadvantages of Flutter

Advantage -
  1. Cross-Platform
    - Work on diffrenet operating system
  2. Opensource 
    - Free and opensource
  3. Fast Development 
    - Hot Reload speedup testing 
  4. Single Codebase 
    - Less code, work in different device and os
  5. High Performance 
    - Has more performance 
  6. Large Community 
    - Has active and large community.

Disadvantages -
  1. Large App Size -
     - Flutter apps are large in size
  2. Limited Native Feature 
     - Limited in natave feature.
  3. Learning Curve
     - Dart lanaguage still new to some developers
  4. IOS support 
     - slightly less polised compare to Andorid.

#######################################################################################################
71. Discuss the importance of hot reload and hot restart in Flutter. How do they improve the
development process?

  1. Hot-Reload 
    1. Inject code change directly into running code
    2. Not requre to restart the server.
    3. Ideal for UI update in development
    4. Speed up testing and design tweaks.
  
  2. Hot-Restart 
    1. Fully restart the app and rebuild the Ui from scratch
    2. Clear all apps state

  3. Save time,by avoiding full rebuild
  4. Enable faster development 
  5. Enable faster Debugging.

######################################################################################################

67.  Explain the importance of gestures in mobile app development. How do they enhance user
experience?
    1. Feel Natural 
        - Feel like real world action
    2. Easy to use 
        - Make app simple and fun.
    3. Faster Navigation
        - Quickly Move thourght the app.
    4. More Screen space
        - Fewer button, more screen space.
    5. More Interactive 
        - Apps feel smoother and more responsive
    6. Example -
        1. Wipe phone two time to turn-on torch 
        2. Anti Wipe the phone to turn on Camera 
###########################################################################################################
69.  What is the role of the Flutter engine in rendering UI components? How does it interact with
the platform-specific code? 
   1. Flutter engine handles UI rendering.
   2. It uses Skia ,a fast graphics library. to draw widget
   3. Converts Flutter widget into pixels on the screen

   Interaction with platform specific code 
        1. flutter is common layer over native code
        2. It uses platform channel to talk to native code .
        3. Native code does the job and sends the result back.
############################################################################################################
73.  Describe the layered architecture of Flutter (e.g., Framework, Engine, Embedder) and how it
contributes to performance. Provide an introduction to Dart programming, focusing on its role
in Flutter. Explain variables and data types in Dart with examples (e.g., int, String, dynamic).

Layered Architecture of FLutter 
  1. Framework Layer 
     - Top layer with UI state management,
       written in Dart, supports Hot Reload.
  2. Engline 
     - Build in C++, handle redering using Skia
     - Runs Dart as native code.
  3. Embeddar 
    - Connects Flutter to Andorid/iOS,
    - Handle device feature via platform channels.

----------------------------------------------------------------
Dart Programming
 1. Dart is programming language used in flutter.
 2. Designed for high-performance UI development.
 3. JIT and AOT 
    - Dart uses JIT (Just-in-Time) for development
    - uses AOT (Ahead of Time) for optimizd production build
4. Async Programming 
    - Dart Support Asyncornouse Programming
----------------------------------------------------------------------

Data types 
    1. int - for whole numbers
    2. double - for decimal numbers
    3. String -  for text
    4. bool - for boolean
    5. dynamic - flexible type which can be change 
    6. List - collection of elements
    7. Map - Key-value pairs

#####################################################################################################
74.  Discuss Object-Oriented Programming (OOP) concepts in Dart (e.g., classes, objects,
inheritance) with a simple class example. 

Dart, the programming language used in Flutter,
supports Object-Oriented Programming (OOP) principles such as classes, objects, and inheritance. Letâ€™s go over these concepts with simple examples

1. Classes and Objects 
    - Class A blueprint for creating objects.
2. Object 
    - An instance of class.

Example -
        class Car {
        String color;
        int year;

        Car(this.color, this.year);  // Constructor

        void display() {
            print("Car color: $color, Year: $year");
        }
        }

        void main() {
        var car = Car('Red', 2022);
        car.display();  // Output: Car color: Red, Year: 2022
        }

3. Inheritance 
    - Allow one class to inherit properties and method from another class

Example - 

        class Animal {
        void speak() {
            print("Animal speaks");
        }
        }

        class Dog extends Animal {
        @override
        void speak() {
            print("Dog barks");
        }
        }

        void main() {
        var dog = Dog();
        dog.speak();  // Output: Dog barks
        }



1. What is MVC? Discuss in brief
5. How does ASP.NET MVC work? Explain in detail?

    1. MVC stands for Model View Controller
    2. It is way to organise code especially in web and destop applications
       to make it clear and easier to manage.
    Component of MVC
        1. Model
        2. View
        3. Controller

    1. Model
      - Model manage data, logic and rule of applications

    2. View 
      - View handle user inteface and presenation
      - It display data from the model to the user
      - It send user input to the controller.
      - eg- HTML, CSS template that show blogs post on page.

    3. Controller -
       - It act as a middle man between Model and View
       - It process input from the user call the sepecific model and return reponse to the view.

#################################################################################################
    
2. Enlist the advantages and Feature of MVC?

    1. Sepeartion of UI, data and logic
    2. Reusablity
    3. Testablity
    4. Support Parallel Development
    5. Fast Development

    1. Seperation of UI and logic
       - Keeps things organised
         - Model : handle data
         - View : handle user interface
         - Controller:  handle User Action

    2. Reusablity 
       - You can reuse model, view and controller in diffrent part of application
    3. Testablity 
       - Easier to test each part seperatly.
    4. Support Parallel Development 
       - Different people can work on Model, View, and Controller at same time.
    5. Fast Development
       - Due to better structure and team work development is faster

#################################################################################################

23. Differentiate between NoSQL and RDBMS
             RDBMS                     NoSQL


            RDBMS                          NSQL
  1. Structure table with        1. Unstructured, semi-stuctured
     predefined shemas              sturctured.
  2. Fixed schema                2. Varable schema can be changed 
                                    or adopt according to need.
  3. uses Sql for quering and    3. Use's various querry languages
     manupulating data
  4. Desgin for vertical         4. Design for horizontal scalablity.
     scalablity
  5. Invole Atomacity,           5. Basically available in softstate
     Consistency,                   consistent
     Isolation, 
     Durablity 
  6. Less Flexible               6. Highly Flexible
  7. Cost unefficent             7. Cost Efficent
  8. Run on server               8. Run on clouds
  9. less performace             9. High performace
  10. no object orented          10. object orented database
      database
  11. less optimize storage      11. Optimize storage
  12. Data is stored in          12. Data is stored in 
      form of queryset               form of object
  13. For example -              13. Mangodb, Redis,
      Mysql, Postgress,             
      Oracle, SQL server
      SQlite

##############################################################################################

4. How routing is done in the MVC? Explain with suitable example
    1. Model
      - Model represents the data and bussiness logic of the application
      - It handle data, (retriviing, sorting etc) from database

    2. View 
      - View handle user inteface and presenation
      - It represents the UI
      - It display data from the model to the user via controller
      - It send user input to the controller.
      - eg- HTML, CSS template that show blogs post on page.

    3. Controller -
       - It act as a middle man between Model and View
       - It process input from the user call the sepecific model and return reponse to the view.

    Routing -
     - When user request the url eg - /Home
     - then router look for which Controller and Action to use or call.
     - Home is the controller like helper for a specific task.
     - Index is the action like special task within that controller.

     Example -
      - URL- Home/Index
      - System says Go to HomeController and run the Index method.

      public ActionResult Index()
      {
         return View(); // Shows the page to the user.
      }

#####################################################################################################

6. What are the types of results in MVC?  
  Following are the different types of results in MVC
    1. ViewResult 
    2. RedirectResult
    3. JsonResult
    4. ContentResult
    5. FileResult
    6. EmptyResult

   1. ViewResult
      - It is used to display a view (html page)
   2. RedirectResult
      - It is used to redirect or navigate the user to another page
   3. JsonResult 
      - It return the data in JSON format (Javascript object Notation)
   4. ContentResult 
      - It is used to send plain text or raw ContentResult
   5. FileResult 
      - It is used to send file to the user for download.
   6. EmptyResult 
      - This result return no content (eg after deleting a record)

######################################################################################################


7. What is the difference between Web Forms and MVC?
       Web Forms                                MVC

1. It has a complex lifecycle.                 1. It has a simpler lifecycle.
2. It does not have full control over HTML.    2. It has full control over HTML.
3. Here UI and logic are tightly linked.       3. It separates UI, logic, and data clearly.
4. It’s hard to test.                          4. It’s easy to test.
5. Uses ViewSet,                             5. It not uses Viewset
6. Routing is limited.                         6. Routing is not limited.
7. Easier to learn for beginners.              7. Harder to learn, requires more knowledge.
8. Can be slower due to ViewStat               8. Faster as it not use Viewset
9. It is less Flexible                         9. It is more Flexible
10. It is less scaleable                       10. It is more scaleable
11. has limiation to ui custimization          11. Has full control over ui custimization


#####################################################################################

8. Mention what is the difference between Temp data, View, and View Bag?
  1. Temp data
     - Data presist for current requst only but can be passed to another request.
     - Used for passing data between reqeusts
     - store data of any type
     - Accessing using TempData["key"]
     - it is slow comare to other
     
  2. ViewData
     - Data presist for current request only.
     - Used for passing data to view within same request.
     - store data in key - value pair
     - Accessing using ViewData["key"]
     - It is faster 

  3. ViewBag
     - Data presist for current request only.
     - Used for passing data to view within same request.
     - store data dyanmically as properties.
     - Accessing using ViewBag.key
     - It is similar to ViewData but has easy syntax.

################################################################################################
What is TempData in MVC? Explain with suitable example

  1. Temp data
     - Data presist for current requst only but can be passed to another request.
     - Used for passing data between reqeusts
     - store data of any type
     - Accessing using TempData["key"]
     - it is slow comare to other
     
   Example -

    public ActionResult SubmitForm()
    {
      TempData["Msg"] = "Thank you";
      return RedirectToAction("Confermation");
    }

    public ActionResult confermation()
    {
      ViewBag.Msg = TempData["Msg"];
      return View();
    }

    Confermation.cshtml

    <h1>@ViewBag.Msg</h1>
   
##############################################################################################

10. What are the Filters in MVC?
   1.  Authorization Filters
   2.  Action Filters
   3.  Result Filters
   4. Exception Filters

   Tyes of Filter in MVC
    1. Authorization Filters
      - execute before anything else.
      - Used for security, to check if the user is authorized.

    2. Action Filters
      - execute before and after an action method is called.
      - Used for logging, validation or modifiy result

    3. Result Filters
      - execute before and after the result is executed

    4. Exception Filters
      - execute when exception occurs
      - used for error handling
      
#############################################################################################

11. Discuss Partial View in MVC in detail?
      1. Partial view in MVC is reusable piece of code.
      2. It contain the HTML + Razor code that can be reusable in mulitpal views.
      3. It act like resuable component.
      4. It obey DRY principal, to avoid repeating code.
      5. It allow us to split the code into smaller, managable pieces.
      6. It is used to create common ui part like header, footer, navbar, or forms over webpage.
      7. to create partial view, create file start with undersocre inside the View folder.
      8. Example
        _NavbarPartial.cshtml

        <nav>
            <li> Home </li>
            <li> About </li>
            <li> Contact</li>
        </nav>

      9. Accessing
         You can access the partial view in your view using @Html.Partil("your_Partil_view_name")
         Example
         example.cshtml

         @Html.Partial("_NavbarPartial")

#######################################################################################################

12. What is Razor view Engine? Explain the syntax of Razor View?
    1. Razor is a view engine used in ASP.NET MVC to generate dyanmic web pages.
    2. It allow us to embeded  HTML and C# code in same file.
    3. The file extention of razor file for C# is cshtml
    4. The file extenction of razor file for VB.Net is vbhtml
    5. It has easy and clean syntax
    6. It is easy to read and write
    7. Auto complete is support in VS studio
    8. It helps in seperating UI and logic


    Syntax -
    1. @ is used to embeded C# code in html
      Example -
         
         @Datetime
         <h1>current date-time @Datetime.Now</h1>

    2. Declare Varable
       Example 
       @{
         var name = "Mike";
       }
       <p>Hello, @name</p>

    3. if else statement
      Example
      @{
         int age = 20
      } 

      @if(age==20){
         <p>you can drive</p>
      }
      else
      {
         <p>you cannot drive</p>
      }
   
   4. Loop
     @for(i=0; i<10; i++;){
         <p>Counter: @i</p>
     }

#####################################################################################
13. What is strongly type view? Explain with help of example
 1. A strong typed view is a view that bind to speific model class
 2. It allow us to use model properties directly in view.
 3. Helps us to create dynamic forms and pages more easily.
 4. It catches error at compile time not runtime.
 5. Easy to maintain code.

 For Example -
 -------------------------------------------------------
  Models/Student.cs

  namespace Myapp.Models
  {
    public class Student
    {
      public int Id {get; set;}
      public string name {get; set;}
      public int age {get; set;}
    }
  }


-------------------------------------------------------
  Controller/StudentController.cs
  using Myapp.Models

  public class StudentController : Controller
  {
      public ActionResult Details(){
         Student student = new Student()
         {
            Id = 1,
            Name = "Mike",
            age = 20
         }

         return View(student);
      }
  }

-------------------------------------------------------
Details.cshtml

@model Myapp.Models.Student

<h1>Student Detail</h1>

<p>@Model.Id</p>
<p>@Model.name</p>
<p>@Model.age</p>

###############################################################################

14. How to pass data from controller to view? Explain with suitable example
  Follwoing are the diffrent ways by which we can pass data 
  from controller to view.
  1. Using ViewBag
  2. Using ViewData
  3. Using Model (Strong typed view)

  1. Using ViewBag -
     It is dynamic object not required to difine type
     Example -
     controller -

     public ActionResult Student()
     {
         ViewBag.Message = "Hello World";
         return View()
     }

     View
     <h1>@ViewBag.Message</h1>

------------------------------------------------------------------------------
2. Using ViewData
   1. ViewData is similar to ViewBag
   2. It store data in key-value pair

   Example 
   controller 

   public ActionResult Student(){
      ViewData["Message"]="Hello World";

      return View()
   }

   View
   <h1>@ViewBag["Message"]</h1>

-----------------------------------------------------------------------------
3. Using Model
   1. It is best practice
   2. It is more secure way to pass the data to view
   3. It is also know as storng typed view

   For example 
   - Model

         public class Student{
            public int id {get; set;}
            public string name{get; set;}
         }

   - Controller

         Myapp.Models.Student
         public ActionResult Student(){
            Student student = new Student()
            {
               id = 1,
               name = "Rohit",
            }

            return View(student);
         }

   - View
         Myapp.Models.Student

         <p>@Model.id</p>
         <p>@Model.name</p>
-------------------------------------------------------------------

16. What are HTML helpers in MVC?
   1. Makes your HTML dynamic.
   2. Reduces Mannul HTML typing.
   3. Support direct model binding
   4. Support Validation Feature.

   Following are the different HTML helpers
   1. TextBox
      - Example - @Html.TextBoxFor(model => model.Name)  
      - Used to get text input from the user

   2.  Password
       Example-  @Html.Password("password")
      - Used to get password  input from the user 
      - Hide the input text with dots or astricks
   3. Checkbox -
      Example @Html.CheckBox("i_agree")
      - Used to get  True/False Yes or No input from the user

   4.TextArea 
     Example @Html.TextArea("message")
     - Used to input large text from the user

####################################################################################
   